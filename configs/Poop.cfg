[gcode_macro _AFC_GLOBAL_VARS]
description: Global variables used in multiple macros
gcode: # Leave Empty

# Set this to match your AFC_stepper base naming in AFC_Hardware.cfg
variable_stepper_name             : 'lane'    # [AFC_stepper lane1] [AFC_stepper lane2]...

variable_travel_speed             : 120       # Speed mm/s
variable_z_travel_speed           : 30        # Speed mm/s
variable_accel                    : 2000      # Move accel for all macro moves
variable_verbose                  : 1         # Console Output for macros
                                              #  0 - None
                                              #  1 - Limited
                                              #  2 - All
[gcode_macro _AFC_POOP_VARS]
description: Poop macro configuration variables
gcode: # Leave empty


variable_purge_loc_xy             : -1, -1    # (x,y) Location of where to purge
variable_purge_spd                : 6.5       # Speed, in mm/s, of the purge.
variable_z_purge_move: False
# Speed, in mm/s to lift z after the purge is completed. Its a faster lift to keep it from 
# sticking to the toolhead
variable_fast_z                   : 15
variable_z_lift                   : 2        # Z height to raise to after the purge is completed as part of the fast z move

# If the toolhead returns to initial position after the poop is complete.
variable_restore_position         : False     # True = return to initial position, False = don't return

# The height to raise the nozzle above the tray before purging. This allows any built up 
# pressure to escape before the purge.
variable_purge_start              : 0

# Set the part cooling fan speed. Disabling can help prevent the nozzle from cooling down 
# and stimulate flow, Enabling it can prevent blobs from sticking together.
variable_part_cooling_fan         : True      # Run it at full speed
variable_part_cooling_fan_speed   : 1.0       # Speed to run fan when enabled above. 0 - 1.0
variable_purge_cool_time          : 5         # Time to pause after purge to allow fan to cool the poop in seconds

# ==================== PURGE LENGTH TUNING
# Default purge length to fall back on when neither the tool map purge_volumes or 
# parameter PURGE_LENGTH is set.
variable_purge_length             : 90

# The absolute minimum to purge, even if you don't changed tools. This is to prime the 
# nozzle before printing
variable_purge_length_minimum     : 85

# The slicer values often are a bit too wasteful. Tune it here to get optimal values. 0.6
# is a good starting point.
#variable_purge_length_modifier    : 1

# Length of filament to add after the purge volume. Purge volumes don't always take 
# cutters into account and therefor a swap from red to white might be long enough, but 
# from white to red can be far too short. When should you alter this value:
#   INCREASE: When the dark to light swaps are good, but light to dark aren't.
#   DECREASE: When the light to dark swaps are good, but dark to light aren't. Don't 
#     forget to increase the purge_length_modifier
#variable_purge_length_addition    : 0
# The servo hardware configuration. Change the values to your needs.
# 
[servo blobifier]
# Pin for the servo.
pin: PG14
# Adjust this value until a 'BLOBIFIER_SERVO POS=in' retracts the tray fully without a 
# buzzing sound
minimum_pulse_width: 0.00053
# Adjust this value until a 'BLOBIFIER_SERVO POS=out' extends the tray fully without a 
# buzzing sound
maximum_pulse_width: 0.0023
# Leave this value at 180
maximum_servo_angle: 180
  

[gcode_macro BLOBIFIER_SERVO]
# increase this value if the servo doesn't have enough time to fully retract or extend
variable_dwell_time: 200
gcode:
  {% set pos = params.POS %}
  {% if pos == "in" %}
    SET_SERVO SERVO=blobifier ANGLE=180
    G4 P{dwell_time}
  {% elif pos == "out" %}
    SET_SERVO SERVO=blobifier ANGLE=0
    G4 P{dwell_time}
  {% else %}
    {action_respond_info("BLOBIFIER: provide POS=[in|out]")}
  {% endif %}
  SET_SERVO SERVO=blobifier WIDTH=0

[gcode_macro AFC_POOP]
variable_max_iteration_length: 60
variable_iteration_z_raise: 6
variable_iteration_z_change: 0.6
variable_max_iterations_per_blob: 2
variable_pressure_release_time: 500
variable_purge_z: 0

gcode:
  {% set gVars                  = printer['gcode_macro _AFC_GLOBAL_VARS'] %}
  {% set travel_speed           = gVars['travel_speed'] * 60|float %}
  {% set z_travel_speed         = gVars['z_travel_speed'] * 60|float %}
  {% set verbose                = gVars['verbose']|int %}
  {% set vars                   = printer['gcode_macro _AFC_POOP_VARS'] %}
  {% set purge_x, purge_y       = vars.purge_loc_xy|map('float') %}
  {% set purge_spd              = vars['purge_spd'] * 60|float %}
  {% set z_poop                 = vars['z_purge_move']|default(true)|lower == 'true' %}
  {% set fast_z                 = vars['fast_z'] * 60|float %}
  {% set z_lift                 = vars['z_lift']|float %}
  {% set part_cooling_fan       = vars['part_cooling_fan']|default(true)|lower == 'true' %}
  {% set part_cooling_fan_speed = vars['part_cooling_fan_speed']|default(1.0)|float %}
  {% set purge_cool_time        = vars['purge_cool_time'] * 1000|float %}
  {% set purge_length           = vars['purge_length']|float %}
  {% set purge_length_minimum   = vars['purge_length_minimum']|float %}
  {% set purge_start            = vars['purge_start']|float %}
  {% set restore_position       = vars['restore_position']|default(true)|lower == 'true' %}

  {% if verbose > 0 %}
    RESPOND TYPE=command MSG='AFC_Poop: Starting poop'
  {% endif %}

  SAVE_GCODE_STATE NAME=_AFC_POOPING

  {% if part_cooling_fan %}
    {% if verbose > 1 %}
      RESPOND TYPE=command MSG='AFC_Poop: Set Cooling Fan to Full Speed'
    {% endif %}
    {% set backup_fan_speed = printer.fan.speed %}
    M106 S{(part_cooling_fan_speed * 255)|int}
  {% endif %}
  
  {% set backup_feedrate = printer.gcode_move.speed_factor %}
  M220 S100
    
  {% if params.PURGE_LENGTH %}
    {% set purge_len = params.PURGE_LENGTH|float %}
  {% else %} 
    {% set purge_len = purge_length %}
  {% endif %}
    
  # Apply purge minimum
  {% set purge_len = [purge_len, purge_length_minimum]|max %}
  G90

  {% if verbose > 1 %}
    RESPOND TYPE=command MSG='AFC_Poop: Move To Purge Location'
  {% endif %}
  
  G1 X{purge_x} Y{purge_y} F{travel_speed}

  {% if z_poop %}
    G1 Z{purge_z + purge_start} F{z_travel_speed}
    BLOBIFIER_SERVO POS=out
  {% endif %}
    
  {% set iterations = (purge_len / max_iteration_length)|round(0, 'ceil')|int %}

  # Repeat the process until purge_len is reached
  {% for n in range(iterations) %}
    {% if verbose > 1 %}
      RESPOND TYPE=command MSG='AFC_Poop: Purge Iteration {n}'
    {% endif %}

    # Calculate current iteration in current blob
    {% set step = n % max_iterations_per_blob %}
    {% if step == 0 %}
      G1 Z{purge_z + purge_start} F{z_travel_speed}
    {% endif %}

    {% set purge_amount_left = purge_len - (max_iteration_length * n) %}
    {% set extrude_amount = [purge_amount_left, max_iteration_length]|min %}
    {% set extrude_ratio = extrude_amount / max_iteration_length %}

    G91 
    M83

    {% set step_triangular = step * (step + 1) / 2 %}
    {% set z_raise_substract = purge_start if step == 0 else step_triangular * iteration_z_change %}
    {% set raise_z = (iteration_z_raise - z_raise_substract) * extrude_ratio %}
    {% set raise_z = [raise_z, 0]|max %}

    {% set duration = extrude_amount / purge_spd %} 

    {% if z_poop %}
      {% set speed = raise_z / duration %}
      G1 Z{raise_z} E{extrude_amount} F{speed}
    {% else %}
      G1 E{extrude_amount} F{purge_spd}
    {% endif %}


    {% set max_iterations_reached = step == max_iterations_per_blob - 1 %}
    {% set purge_length_reached = purge_len - max_iteration_length * (n + 1) <= 0 %}

    {% if max_iterations_reached or purge_length_reached %}
      M83
      BLOBIFIER_SERVO POS=in
      BLOBIFIER_SERVO POS=out
      BLOBIFIER_SERVO POS=in
      BLOBIFIER_SERVO POS=out
      G4 P{purge_cool_time}  # Pause
    {% endif %}
  {% endfor %}

  G90
  {% if verbose > 1 %}
    RESPOND TYPE=command MSG='AFC_Poop: Fast Z Lift to keep poop from sticking'
  {% endif %}

  {% if z_poop > 0 %}
    G1 Z{z_lift} F{fast_z}21000
  {% endif %} 

  {% if verbose > 1 %}
    RESPOND TYPE=command MSG='AFC_Poop: Restore fan speed and feedrate'
  {% endif %}
  {% if part_cooling_fan %}
    M106 S{(backup_fan_speed * 255)|int}
  {% endif %}
  M220 S{(backup_feedrate * 100)|int}

  RESTORE_GCODE_STATE NAME=_AFC_POOPING MOVE={1 if restore_position else 0}

